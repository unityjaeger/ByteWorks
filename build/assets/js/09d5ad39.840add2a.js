"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{3973:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"examples","title":"Examples","description":"Basic Usage","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/ByteWorks/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/unityjaeger/ByteWorks/edit/main/docs/examples.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Intro","permalink":"/ByteWorks/docs/intro"},"next":{"title":"Types","permalink":"/ByteWorks/docs/how"}}');var s=t(4848),o=t(8453);const a={sidebar_position:2},i="Examples",l={},u=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Built-in Functions",id:"built-in-functions",level:3},{value:"Raw Usage",id:"raw-usage",level:3},{value:"Custom Types",id:"custom-types",level:2},{value:"Merged Buffers",id:"merged-buffers",level:2}];function f(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"examples",children:"Examples"})}),"\n",(0,s.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(r.h3,{id:"built-in-functions",children:"Built-in Functions"}),"\n",(0,s.jsx)(r.p,{children:"ByteWorks provides two convenient functions, createAndSerialize and resultExcludingCursor, to simplify serialization and deserialization, at the cost of a minimal performance overhead."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"--define a serializer for a vector3 with each axis using a f32\r\nlocal vector3Type = ByteWorks.vector3(ByteWorks.f32)\r\n\r\n--create buffer from the serializer type and data\r\nlocal vector = Vector3.new(1, 2, 3)\r\nlocal buff = ByteWorks.createAndSerialize(vector3Type, vector)\r\n\r\n--extract the data from the buffer\r\nlocal deserializedVector = ByteWorks.resultExcludingCursor(vector3Type, buff, 0)\r\nprint(deserializedVector) --\x3e 1, 2, 3\n"})}),"\n",(0,s.jsx)(r.h3,{id:"raw-usage",children:"Raw Usage"}),"\n",(0,s.jsx)(r.p,{children:"For more control and performance, you can use the ser, des, and size methods directly."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"local u16Type = ByteWorks.u16\r\n\r\n--create a buffer with enough space for that type\r\n--for u16, the size is constant so the parameter is optional, however if you use strict then you still want to pass in the value because of how the type works\r\nlocal buff = buffer.create(u16Type.size(42))\r\n\r\n--serialize the number\r\nu16Type.ser(buff, 0, 42)\r\n\r\n--deserialize, ignore the first argument that is the cursor\r\nlocal _offset_, value = u16Type.des(buff, 0)\r\nprint(value) --\x3e 42\n"})}),"\n",(0,s.jsx)(r.h2,{id:"custom-types",children:"Custom Types"}),"\n",(0,s.jsx)(r.p,{children:"In ByteWorks, you can easily define custom serializers to get specific behavior you need, custom serializers will work with all built in types."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"--very very simple example but you can do whatever you can come up with\r\nlocal customType: ByteWorks.ByteWorksType<{number}> = table.freeze({\r\n\tser = function(buff, offset, value)\r\n\t\tbuffer.writeu8(buff, offset, value[1])\r\n\t\toffset += 1\r\n\t\tbuffer.writeu8(buff, offset, value[2])\r\n\t\toffset += 1\r\n\t\treturn offset\r\n\tend,\r\n\tdes = function(buff, offset)\r\n\t\tlocal num1, num2 = buffer.readu8(buff, offset), buffer.readu8(buff, offset + 1)\r\n\t\treturn offset + 2, {num1, num2} --offset gets returned first\r\n\tend,\r\n\tsize = function(value)\r\n\t\treturn 2\r\n\tend,\r\n})\r\n\r\nlocal data = {5, 10}\r\n\r\nlocal buff = byteWorks.createAndSerialize(customType, data)\r\nlocal deserialized = byteWorks.resultExcludingCursor(customType, buff, 0)\r\nprint(deserialized) --\x3e {5, 10}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"merged-buffers",children:"Merged Buffers"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local u8Type = ByteWorks.u8\r\nlocal stringType = ByteWorks.string\r\nlocal vector3Type = ByteWorks.vector3(ByteWorks.f32)\r\n\r\n--create a buffer with enough space to fit all 3 values\r\nlocal buff = buffer.create(\r\n\tu8Type.size(42) +\r\n\tstringType.size("Hello") +\r\n\tvector3Type.size(Vector3.new(1, 2, 3))\r\n)\r\n\r\n--serialize sequentially\r\nlocal offset = 0\r\noffset = u8Type.ser(buff, offset, 42)\r\noffset = stringType.ser(buff, offset, "Hello")\r\noffset = vector3Type.ser(buff, offset, Vector3.new(1, 2, 3))\r\n\r\n--deserialize sequentially\r\noffset = 0 --since this example is doing it in the same scope, we need to set offset back to 0\r\nlocal value1\r\noffset, value1 = u8Type.des(buff, offset)\r\nlocal value2\r\noffset, value2 = stringType.des(buff, offset)\r\nlocal value3\r\noffset, value3 = vector3Type.des(buff, offset)\r\n\r\nprint(value1, value2, value3) --\x3e 42, Hello, 1, 2, 3\n'})})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var n=t(6540);const s={},o=n.createContext(s);function a(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);