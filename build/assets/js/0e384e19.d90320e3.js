"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{2053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"intro","title":"Intro","description":"ByteWorks is a library that aims to make working with buffers as comfortable as possible while still maintaining high performance. Manually managing binary formats is a tough task and is prone to errors, which is why ByteWorks includes some useful, and hard to implement formats like half precision floating point numbers, variable length quantity, bitfields, bitmasks.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/ByteWorks/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/unityjaeger/ByteWorks/edit/main/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Examples","permalink":"/ByteWorks/docs/examples"}}');var i=n(4848),r=n(8453);const o={sidebar_position:1},a="Intro",l={},d=[{value:"Key Features",id:"key-features",level:2},{value:"Who Is ByteWorks For?",id:"who-is-byteworks-for",level:2}];function c(e){const t={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"intro",children:"Intro"})}),"\n",(0,i.jsx)(t.p,{children:"ByteWorks is a library that aims to make working with buffers as comfortable as possible while still maintaining high performance. Manually managing binary formats is a tough task and is prone to errors, which is why ByteWorks includes some useful, and hard to implement formats like half precision floating point numbers, variable length quantity, bitfields, bitmasks."}),"\n",(0,i.jsx)(t.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Flexible"}),": Missing a serializer you need? You can easily implement it yourself and it will work with existing types."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Modular and Composable"}),": Compose serializers to handle even the most complex data structures with ease."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Bit-Level Precision"}),": Work with bitfields and bitmasks to pack data efficiently and manage binary flags."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"who-is-byteworks-for",children:"Who Is ByteWorks For?"}),"\n",(0,i.jsxs)(t.p,{children:["ByteWorks is for ",(0,i.jsx)(t.strong,{children:"any Roblox developer"})," who needs to work with binary data. Whether you're:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Building a ",(0,i.jsx)(t.strong,{children:"multiplayer game"})," and need to send data over the network efficiently,"]}),"\n",(0,i.jsxs)(t.li,{children:["Saving ",(0,i.jsx)(t.strong,{children:"game state"})," or player data in a compact format,"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);